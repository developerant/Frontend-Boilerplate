// MIXINS
// =================================================================================== 

// HIDDEN CLASSES
// -------------------------------------------------------
%hide-text {
	display:block;
	text-indent:100%;
	white-space:nowrap;
	overflow:hidden;
}

%clearfix {
	zoom:1;
	&:before, &:after {
		content: "\0020";
		display: block;
		height: 0;
		overflow: hidden;
	}
	&:after {
		clear: both;
	}
}

// Search a list of lists ($haystack) for value ($needle) at the first position. 
// Returns that item in the list, or false if not found.
// Based on breakup-list-key-search mixin by @BPScott - (https://github.com/bpscott/breakup)
 
@function get-list-value($haystack, $needle) {
    
    @each $haystack-item in $haystack {
        @if $needle == nth($haystack-item, 1) {
            @return nth($haystack-item, 2);
        }
    }

    @return false;
}

// MEDIA QUERY BREAKPOINTS
// -------------------------------------------------------

// Output styles at a fixed size - set in main Sass file
$fix-mqs: false !default;

// Breakpoints media query based on Jake Archibald's Sass IE post: http://jakearchibald.github.io/sass-ie/
// 
@mixin breakpoint($point) {
	// Get the width of the query based on the passed $point variable
	$width: get-list-value($breakpoints, $point);

	// If we're outputting for a fixed media query set...
	@if $fix-mqs {
		// ...and if we should apply these rules...
		@if $fix-mqs >= $width {
			// ...output the content the user gave us.
			@content;
		}
	}
	@else {
		// Otherwise, output it using a regular media query
		@media screen and (min-width: $width) { 
			@content; 
		}
	}
}

// Tweakpoint media querie based off @BPScott's Breakup (https://github.com/bpscott/breakup)
// 
@mixin tweakpoint($width) {
    @if $fix-mqs {
		// ...and if we should apply these rules...
		@if $fix-mqs >= $width {
			// ...output the content the user gave us.
			@content;
		}
	}
	@else {
		@media (min-width: #{$width}) { @content; }
	}
}

$old-ie: false !default;

// Custom breakpoint mixin, can pass a full media query rule here to output if needed 
// for use with max-width/multi-size queries. Pass true as second argument to output in the IE stylesheet
@mixin custom-breakpoint($query, $output-for-ie:false) {
	@if $old-ie and $output-for-ie {
		@content;
	}
	@else {
		@media only screen and #{$query} { @content; }
	}	
}

// Old IE mixin - from Jake Archibald's Sass IE post: http://jakearchibald.github.io/sass-ie/
// 
@mixin old-ie {
	// Only use this content if we're dealing with old IE
	@if $old-ie {
		@content;
	}
}

// GENERAL MIXINS
// -------------------------------------------------------
// Rems with pixel fallback for any property 
// @author @BPScott (https://github.com/BPScott/bpscott.github.io/blob/develop/source/stylesheets/vendor/_rem.scss)
@mixin rem($property, $px-values, $baseline-px: $base-font-size) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem;

  // Create an empty list that we can dump values into
  $rem-values: ();
  @each $value in $px-values {
	// If the value is zero, return 0
	$rem-values: append($rem-values, if($value == 0, $value, $value / $baseline-rem));
  }

  // Output the property's px and rem values
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

// STYLE MIXINS
// -------------------------------------------------------

// BUTTONS
@mixin button($grad-start, $grad-end) {
	display:inline-block;
	padding:8px 20px;
	color:$text-white;
	line-height:1;
	text-align:center;
	text-shadow:2px 1px 3px rgba(0,0,0,0.7);
	@include background-image(linear-gradient($grad-start, $grad-end));
	border:1px solid lighten($grad-start, 30%);
	@include border-radius(4px);

	&:hover {
		// Need some sort of hover style?!
		color:#fff;
	}

	&:active {
		position:relative;
		top:1px;
		@include background-image(linear-gradient($grad-end, $grad-start));
	}
}

// ARROWS
@mixin arrow-right($size, $color, $bg: #fff) {
	display:block;
	height:0;
	border-top:$size solid $bg;
	border-bottom:$size solid $bg;
	border-left:$size solid $color;
}

@mixin arrow-left($size, $color, $bg: #fff) {
	display:block;
	height:0;
	border-top:$size solid $bg;
	border-bottom:$size solid $bg;
	border-right:$size solid $color;
}

@mixin arrow-up($size, $color, $bg: #fff) {
	display:block;
	height:0;
	border-right:$size solid $bg;
	border-left:$size solid $bg;
	border-bottom:$size solid $color;
}

@mixin arrow-down($size, $color, $bg: #fff) {
	display:block;
	height:0;
	border-right:$size solid $bg;
	border-left:$size solid $bg;
	border-top:$size solid $color;
}